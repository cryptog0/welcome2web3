(function(){
	'use strict';
	let components = [];
	let options = {};
	let past = [];
	let debug = false;
	function componentLoaded(i){
		return function(event){
			if(components.length-1 == i){
				moveTo('/');
				if(options.onload){
					options.onload();
				}
			}else{
				loadComponent(i+1);
			}
		}
	}
	function error(opts){
		return function(){
			alert(opts.message);
		};
	}
	function loadComponent(i){
		if(components.length <= i){
			moveTo('/');
			if(options.onload){
				options.onload();
			}
			return;
		}
		if(typeof window[components[i]]==='function'){
			loadComponent(i+1);
		}else{
			let script = document.createElement('script');
			script.type = 'text/javascript';
			let d = debug ? '?load='+uuid() : '';
			script.src = options.componentPath+components[i]+'.js'+d;
			script.onabort = script.onerror = script.ontimeout = error({message:"The component "+components[i]+" failed to load."});
			script.onload = componentLoaded(i);
			document.head.appendChild(script);
		}
	}
	function mount(route){
		let view = new window[route.view](route.parameters);
		if(options.history){
			view._pathname = route.url.pathname;
			view._search = route.url.search;
			if(past.length>=options.history){
				past.shift();
			}
			past.push(view);
		}
		setView(view);
	}
	function setView(view,history){
		let app = document.getElementById(options.root);
		app.innerHTML = '';
		if(history){
			if(view.template.recover){
				view.template.recover(app);
			}else{
				app.appendChild(view.template.node);
			}
		}else{
			app.appendChild(generate(view));
		}
	}
	function init(){
		let handleClick = click;
		if(options.linkClick){
			handleClick = options.linkClick;
		}
    document.body.addEventListener("click", function(ev){
			handleClick(ev);
    });
		window.addEventListener('popstate', function(ev){
			let search = location.search;
			let path = location.pathname.replace(/\/$/, "");
			if(options.history&&past.length>1){
				for(let i = past.length-2; i>=0; i--){
					if(path==past[i]._pathname.replace(/\/$/, "")&&search==past[i]._search){
						setView(past[i],true);
						past.splice(i+1);
						return;
					}
				}
			}
			moveTo(location.href);
		});
	}
	function moveTo(route){
		route = getRoute(route);
		if(options.beforePage) options.beforePage(route);
		history.pushState(null, null, route.url.href);
		setTitle(route.title);
		mount(route);
		if(options.afterPage) options.preload(route);
	}
	function URI(href){
		let a = document.createElement("a");
    a.href = href;
    return a;
	}
	function getRoute(a){
		let url = a;
		if(typeof a == 'string'){
			url = URI(a);
		}else if(typeof a ==='object' && !a.nodeName && !a.pathname){
			url = URI(a.path);
		}
		let parameters = get(url);
		let match = null;
		options.routes.every(function(route,i){
			let params = get(URI(route.path));
			let urlMatch = route.path.split('?')[0].replace(/\/$/, "");
			urlMatch = urlMatch==url.pathname.replace(/\/$/, "");
			if(sameKeys(params,parameters)&&urlMatch){
				match = route;
				match.url = url;
				match.parameters = parameters;
				return false;
			}
			return true;
		});
		if(!match){
			match = getRoute('/');
		}
		return match;
	}
	function setTitle(t){
		if(!t) return;
		let title = document.head.getElementsByTagName('title');
		if(title.length>0){
			title[0].innerHTML = t;
		}else{
			title = document.createElement('title');
			title.innerHTML = t;
			document.head.appendChild(title);
		}
	}
	function click(ev){
    let a = ev.target;
    ev.composedPath().forEach(function(parent,i){
      if(parent.nodeName=='A'){
        a = parent;
        return;
      }
    });
		if(a.nodeName=='A'){
			if(a.host==location.host){
				ev.preventDefault();
				moveTo(a);
			}else if(options.redirect){
				ev.preventDefault();
				options.redirect(a);
			}
		}
	}
	function boot(){
    let framework = {};
		framework.autoRender = true;
		framework.register = function(c){
			components.push(c);
		},
		framework.debug = function(){
			return debug;
		}
		framework.boot = function(opts){
			options = opts;
			init();
			if(typeof options.autoRender!=='undefined'){
				framework.autoRender = options.autoRender;
			}
			if(options.debug===true){
				debug = true;
			}
			loadComponent(0);
		},
		framework.title = function (t){
			setTitle(t);
		},
		framework.goto = function(route){
			moveTo(route);
		},
		framework.back = function(){
			history.back();
		},
		framework.clearPast = function(amount){
			if(amount){
				past.splice(-amount);
			}else{
				past = [];
			}
		},
		framework.domain = function(){
			return options.domain ? options.domain : '';
		},
		framework.observer = new IntersectionObserver(function(entries,observer){
	    entries.forEach(function(entry,i){
				const ev = new CustomEvent('intersect', {
					detail: {
						entry:entry
					}
				});
				entry.target.dispatchEvent(ev);
	      //observer.unobserve(target);
	    });
	  },{threshold:0.8,root:document.getElementById('#app')});
		return framework;
	}
	if(typeof(framework) === "undefined"){
        window.framework = boot();
    }else{
        
    }
})();
function remove(self,event){
		trigger(self,{name:event,detail:self.id});
		self.template.node.remove();
}
function generate(self,pp){
	let element = self;
	let first = false;
	let parent = self;
	if(pp){
		parent = pp;
	}else{
		pp = parent;
	}
	if(self.template){
		parent = self;
		pp = self;
		element = self.template;
		if(!element.node){
			first = true;
			if(typeof element.before === 'function'){
				element.before();
			}
			if(!self.id){
				self.id = uuid();
			}
		}
	}
	build(element, pp);
	if(element.children){
		element.children.forEach(function(child,index){
			if(child==null)return;
			if(child.node||(child.template&&child.template.node)){
				generate(child,parent);
			}else{
				element.node.appendChild(generate(child,parent));
			}
		});
	}
	if(first&&typeof element.after == 'function'){
		element.after();
	}else if(typeof element.updated == 'function'){
		element.updated();
	}
	if(typeof element.observe =='function' && element.observe()){
		framework.observer.observe(element.node);
	}
	return element.node;
}
function compare(element,attribute){
	if(element[attribute]){
		let curr = element.node[attribute];
		let val = element[attribute];
		if(typeof val === 'function'){
			val = val();
		}
		if(curr!=val){
			if(attribute=='class'){
				element.node.classList = val;
			}else{
				element.node[attribute] = val;
			}
		}
	}
}
function build(element,parent){
	let build = !element.node;
	if(build){
		element.node = document.createElement(element.nodeName);
	}
	let attributes = ['innerHTML','type','value','class','href','name','id','src'];
	attributes.forEach(function(a,i){
		compare(element,a);
	});
	if(element.attribute){
		element.attribute.forEach(function(a,i){
			let curr= attr(element.node,a.name);
			let val = a.value;
			if(typeof val ==='function'){
				val = val();
			}
			if(curr != val){
				attr(element.node,a.name,a.value,a.prop);
			}
		});
	}
	if(element.style&&build){
		css(element.node,element.style);
	}
	if(typeof element.visible == 'function'){
		if(element.visible()===true){//&&element.node.style.display=='none'
			//css(element.node,'display','inherit');
			element.node.style.removeProperty('display');
			//css(element.node,'display',window.getComputedStyle(element.node).display);
		}else if(element.visible()===false){
			css(element.node,'display','none');
		}
	}
	if(build){
		if(element.events){
			element.events.forEach(function(event,index){
				element.node.addEventListener(event.name,eventCatcher(parent,event.action));
			});
		}
		let events = ['click','change','keyup','keydown','mouseover','load','blur','focus','submit','intersect'];
		events.forEach(function(event,index){
			if(typeof element[event] === 'function'){
				element.node.addEventListener(event, eventCatcher(parent,element[event]));
			}
		});
	}
}
function eventCatcher(parent,event){
	return function(ev){
		event(ev);
		if(framework.autoRender){
			generate(parent);
		}
	}
}
function assign(instance,params){
	for (var prop in params) {
		if (Object.prototype.hasOwnProperty.call(params, prop)) {
			instance[prop] = params[prop];
		}
	}
}
function trigger(self,event,g){
	if(g!==false){
		g = true;
	}
	const ev = new CustomEvent(event.name, {
	  bubbles: g,
	  detail: event.details
	});
	self.template.node.dispatchEvent(ev);
}
function uuid() {
  return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>
    (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
  );
}
function above(element,target){
	let current = element.parentNode;
	if(['BODY','HTML'].indexOf(current.nodeName)>-1){
		return null;
	}
	while(current.nodeName!='BODY'){
		if(current.nodeName==target.toUpperCase()||current.classList.contains(target)){
			return current;
		}
		current = current.parentNode;
	}
	return null;
}
function find(element, target, first){
	let results = element.querySelectorAll(target);
	if(results.length==0){
		return null;
	}else if(results.length > 0 || first === true){
		return results[0];
	}else{
		return results;
	}
}
function css(element,styles, value){
	if(value){
		element.style[styles] = value;
	}else{
		styles.forEach(function(style,index){
			element.style[style.property] = style.value;
		});
	}
}
function attr(element,name,value,prop){
	if(value){
		if(prop){
			element[name]=value;
		}else{
			element.setAttribute(name,value);
		}
	}else{
		if(prop){
			return element[name];
		}else{
			return element.getAttribute(name);
		}
	}
}
function load(self,options){
	if(options.success){
		let success = options.success;
		options.success = function(result,status){
				success(result,status);
				generate(self);
		}

	}
	if(options.error){
		let error = options.error;
		options.error = function(xhr){
				error(xhr);
				generate(self);
		}
	}
	return send(options);
}
function toForm(formData, data, previousKey) {
  if (data instanceof Object) {
    Object.keys(data).forEach(key => {
      const value = data[key];
			if (value instanceof Object && !Array.isArray(value)) {
				//console.log(getxt(value));
        //return this.getFormData(formData, value, key);
      }
      if (previousKey) {
        key = `${previousKey}[${key}]`;
      }

      if (Array.isArray(value)) {
        value.forEach(val => {
          formData.append(`${key}[]`, val);
        });
      } else {
        formData.append(key, value);
      }
    });
  }
}
function send(options){
	let headers = [{
		header:'Content-Type',
		value:'application/x-www-form-urlencoded',
	}];
	if(!options.method){
		options.method = 'POST';
	}
	let data = '';
	if(options.data){
		data=options.data;
		if(typeof data!=='string'){
			headers=[];
			let temp = data;
			data = new FormData();
			toForm(data,temp);
		}
	}
	if(options.headers){
		headers = options.headers;
	}
	let timeout = 2000;
	if(options.timeout){
		timeout = options.timeout;
	}
	if(!options.success&&framework.debug()){
		options.success = function(result,status){console.log(result+" "+status);};
	}
	if(!options.error&&framework.debug()){
		options.error = function(xhr){console.log(xhr.target);};
	}
	let url = framework.domain() + options.url;
	var xhr = new XMLHttpRequest()
	xhr.timeout = timeout;
	xhr.onload = function(r){
		let status = this.status;
		let s = (status >= 200 && status < 300) || status === 304;
		if(s){
			let response = this.response;
			if(options.json){
				response = JSON.parse(response);
			}
			options.success(response,status);
		}else{
			options.error(r.target);
		}
	}
	xhr.onabort = xhr.onerror = xhr.ontimeout = options.error;
	xhr.open(options.method, url);
	headers.forEach(function(h,i){
		xhr.setRequestHeader(h.header, h.value);
	});
	xhr.send(data);
	return xhr;
}
function state(self,key,value){
	let name = self;
	if(typeof self !== 'string'){
		name = self.constructor.name;
	}else{
		name = name + "_" + key;
	}
	if(Array.isArray(value)){
		value.forEach(function(obj,i){
			if(obj instanceof Object && !obj.id){
				obj.id = uuid();
			}
		});
	}
	let replacer = function(k,v){
		if(['template'].indexOf(k)>-1)return undefined;
		return v;
	}
	if(typeof value!='undefined'){
		localStorage.setItem(name, JSON.stringify(value,replacer));
	}else{
		return JSON.parse(localStorage.getItem(name));
	}
}
function get(href){
	if(!href) href = location;
	let params = {};
	if(href.search.length<=1)return params;
	let items = href.search.substring(1).split('&');
	items.forEach(function(item,i){
		if(item!=''){
			let vals = item.split('=');
			params[vals[0]]=decodeURIComponent(vals[1]);
		}
	});
	return params;
}
function sameKeys(a,b){
	return Object.keys(a).length === Object.keys(b).length && Object.keys(a).every(k => b.hasOwnProperty(k))
}
